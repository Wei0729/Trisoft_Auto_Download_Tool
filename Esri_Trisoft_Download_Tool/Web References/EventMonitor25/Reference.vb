'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace EventMonitor25
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="EventMonitor25Soap", [Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Partial Public Class EventMonitor25
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetProgressIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEventDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextEventDetailDataChunkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveEventsByProgressIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveEventsByParentProgressIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveEventOverviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EndEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventDetailWithProgressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteByProgressIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Esri_Trisoft_Download_Tool.My.MySettings.Default.Esri_Trisoft_Download_Tool_EventMonitor25_EventMonitor25
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetProgressIdCompleted As GetProgressIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEventDetailCompleted As GetEventDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextEventDetailDataChunkCompleted As GetNextEventDetailDataChunkCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveEventsByProgressIdsCompleted As RetrieveEventsByProgressIdsCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveEventsByParentProgressIdsCompleted As RetrieveEventsByParentProgressIdsCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveEventOverviewCompleted As RetrieveEventOverviewCompletedEventHandler
        
        '''<remarks/>
        Public Event StartEventCompleted As StartEventCompletedEventHandler
        
        '''<remarks/>
        Public Event EndEventCompleted As EndEventCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventDetailCompleted As AddEventDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventDetailWithProgressCompleted As AddEventDetailWithProgressCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteByProgressIdCompleted As DeleteByProgressIdCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/GetProgressId", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProgressId(ByRef psAuthContext As String, ByVal psEventId As String, ByRef plOutProgressId As Long) As String
            Dim results() As Object = Me.Invoke("GetProgressId", New Object() {psAuthContext, psEventId, plOutProgressId})
            psAuthContext = CType(results(1),String)
            plOutProgressId = CType(results(2),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProgressIdAsync(ByVal psAuthContext As String, ByVal psEventId As String, ByVal plOutProgressId As Long)
            Me.GetProgressIdAsync(psAuthContext, psEventId, plOutProgressId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProgressIdAsync(ByVal psAuthContext As String, ByVal psEventId As String, ByVal plOutProgressId As Long, ByVal userState As Object)
            If (Me.GetProgressIdOperationCompleted Is Nothing) Then
                Me.GetProgressIdOperationCompleted = AddressOf Me.OnGetProgressIdOperationCompleted
            End If
            Me.InvokeAsync("GetProgressId", New Object() {psAuthContext, psEventId, plOutProgressId}, Me.GetProgressIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProgressIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProgressIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProgressIdCompleted(Me, New GetProgressIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/GetEventDetail", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEventDetail(ByRef psAuthContext As String, ByVal plDetailId As Long, ByVal psXMLRequestedEventData As String, ByVal pbIncludeData As Boolean, ByRef psOutXMLEventList As String) As String
            Dim results() As Object = Me.Invoke("GetEventDetail", New Object() {psAuthContext, plDetailId, psXMLRequestedEventData, pbIncludeData, psOutXMLEventList})
            psAuthContext = CType(results(1),String)
            psOutXMLEventList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEventDetailAsync(ByVal psAuthContext As String, ByVal plDetailId As Long, ByVal psXMLRequestedEventData As String, ByVal pbIncludeData As Boolean, ByVal psOutXMLEventList As String)
            Me.GetEventDetailAsync(psAuthContext, plDetailId, psXMLRequestedEventData, pbIncludeData, psOutXMLEventList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEventDetailAsync(ByVal psAuthContext As String, ByVal plDetailId As Long, ByVal psXMLRequestedEventData As String, ByVal pbIncludeData As Boolean, ByVal psOutXMLEventList As String, ByVal userState As Object)
            If (Me.GetEventDetailOperationCompleted Is Nothing) Then
                Me.GetEventDetailOperationCompleted = AddressOf Me.OnGetEventDetailOperationCompleted
            End If
            Me.InvokeAsync("GetEventDetail", New Object() {psAuthContext, plDetailId, psXMLRequestedEventData, pbIncludeData, psOutXMLEventList}, Me.GetEventDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEventDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventDetailCompleted(Me, New GetEventDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/GetNextEventDetailDataChunk"& _ 
            "", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextEventDetailDataChunk(ByRef psAuthContext As String, ByVal plDetailId As Long, ByRef plOffSet As Long, ByRef piSize As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByRef pbOutBytes() As Byte) As String
            Dim results() As Object = Me.Invoke("GetNextEventDetailDataChunk", New Object() {psAuthContext, plDetailId, plOffSet, piSize, pbOutBytes})
            psAuthContext = CType(results(1),String)
            plOffSet = CType(results(2),Long)
            piSize = CType(results(3),Integer)
            pbOutBytes = CType(results(4),Byte())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextEventDetailDataChunkAsync(ByVal psAuthContext As String, ByVal plDetailId As Long, ByVal plOffSet As Long, ByVal piSize As Integer, ByVal pbOutBytes() As Byte)
            Me.GetNextEventDetailDataChunkAsync(psAuthContext, plDetailId, plOffSet, piSize, pbOutBytes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextEventDetailDataChunkAsync(ByVal psAuthContext As String, ByVal plDetailId As Long, ByVal plOffSet As Long, ByVal piSize As Integer, ByVal pbOutBytes() As Byte, ByVal userState As Object)
            If (Me.GetNextEventDetailDataChunkOperationCompleted Is Nothing) Then
                Me.GetNextEventDetailDataChunkOperationCompleted = AddressOf Me.OnGetNextEventDetailDataChunkOperationCompleted
            End If
            Me.InvokeAsync("GetNextEventDetailDataChunk", New Object() {psAuthContext, plDetailId, plOffSet, piSize, pbOutBytes}, Me.GetNextEventDetailDataChunkOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextEventDetailDataChunkOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextEventDetailDataChunkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextEventDetailDataChunkCompleted(Me, New GetNextEventDetailDataChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/RetrieveEventsByProgressIds"& _ 
            "", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveEventsByProgressIds(ByRef psAuthContext As String, ByVal palProgressIds() As Long, ByVal peLevelFilter As eEventLevel, ByVal plLastDetailId As Long, ByVal psXMLEventDataFilter As String, ByVal psXMLRequestedEventData As String, ByRef psOutXMLEventList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveEventsByProgressIds", New Object() {psAuthContext, palProgressIds, peLevelFilter, plLastDetailId, psXMLEventDataFilter, psXMLRequestedEventData, psOutXMLEventList})
            psAuthContext = CType(results(1),String)
            psOutXMLEventList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveEventsByProgressIdsAsync(ByVal psAuthContext As String, ByVal palProgressIds() As Long, ByVal peLevelFilter As eEventLevel, ByVal plLastDetailId As Long, ByVal psXMLEventDataFilter As String, ByVal psXMLRequestedEventData As String, ByVal psOutXMLEventList As String)
            Me.RetrieveEventsByProgressIdsAsync(psAuthContext, palProgressIds, peLevelFilter, plLastDetailId, psXMLEventDataFilter, psXMLRequestedEventData, psOutXMLEventList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveEventsByProgressIdsAsync(ByVal psAuthContext As String, ByVal palProgressIds() As Long, ByVal peLevelFilter As eEventLevel, ByVal plLastDetailId As Long, ByVal psXMLEventDataFilter As String, ByVal psXMLRequestedEventData As String, ByVal psOutXMLEventList As String, ByVal userState As Object)
            If (Me.RetrieveEventsByProgressIdsOperationCompleted Is Nothing) Then
                Me.RetrieveEventsByProgressIdsOperationCompleted = AddressOf Me.OnRetrieveEventsByProgressIdsOperationCompleted
            End If
            Me.InvokeAsync("RetrieveEventsByProgressIds", New Object() {psAuthContext, palProgressIds, peLevelFilter, plLastDetailId, psXMLEventDataFilter, psXMLRequestedEventData, psOutXMLEventList}, Me.RetrieveEventsByProgressIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveEventsByProgressIdsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveEventsByProgressIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveEventsByProgressIdsCompleted(Me, New RetrieveEventsByProgressIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/RetrieveEventsByParentProgr"& _ 
            "essIds", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveEventsByParentProgressIds(ByRef psAuthContext As String, ByVal palParentProgressIds() As Long, ByVal peLevelFilter As eEventLevel, ByVal plLastDetailId As Long, ByVal psXMLEventDataFilter As String, ByVal psXMLRequestedEventData As String, ByRef psOutXMLEventList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveEventsByParentProgressIds", New Object() {psAuthContext, palParentProgressIds, peLevelFilter, plLastDetailId, psXMLEventDataFilter, psXMLRequestedEventData, psOutXMLEventList})
            psAuthContext = CType(results(1),String)
            psOutXMLEventList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveEventsByParentProgressIdsAsync(ByVal psAuthContext As String, ByVal palParentProgressIds() As Long, ByVal peLevelFilter As eEventLevel, ByVal plLastDetailId As Long, ByVal psXMLEventDataFilter As String, ByVal psXMLRequestedEventData As String, ByVal psOutXMLEventList As String)
            Me.RetrieveEventsByParentProgressIdsAsync(psAuthContext, palParentProgressIds, peLevelFilter, plLastDetailId, psXMLEventDataFilter, psXMLRequestedEventData, psOutXMLEventList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveEventsByParentProgressIdsAsync(ByVal psAuthContext As String, ByVal palParentProgressIds() As Long, ByVal peLevelFilter As eEventLevel, ByVal plLastDetailId As Long, ByVal psXMLEventDataFilter As String, ByVal psXMLRequestedEventData As String, ByVal psOutXMLEventList As String, ByVal userState As Object)
            If (Me.RetrieveEventsByParentProgressIdsOperationCompleted Is Nothing) Then
                Me.RetrieveEventsByParentProgressIdsOperationCompleted = AddressOf Me.OnRetrieveEventsByParentProgressIdsOperationCompleted
            End If
            Me.InvokeAsync("RetrieveEventsByParentProgressIds", New Object() {psAuthContext, palParentProgressIds, peLevelFilter, plLastDetailId, psXMLEventDataFilter, psXMLRequestedEventData, psOutXMLEventList}, Me.RetrieveEventsByParentProgressIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveEventsByParentProgressIdsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveEventsByParentProgressIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveEventsByParentProgressIdsCompleted(Me, New RetrieveEventsByParentProgressIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/RetrieveEventOverview", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveEventOverview(ByRef psAuthContext As String, ByVal pasEventTypes() As String, ByVal peStatusFilter As eProgressStatusFilter, ByVal pdModifiedSince As Date, ByVal peUserFilter As eUserFilter, ByVal psXMLRequestedEventData As String, ByRef psOutXMLEventList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveEventOverview", New Object() {psAuthContext, pasEventTypes, peStatusFilter, pdModifiedSince, peUserFilter, psXMLRequestedEventData, psOutXMLEventList})
            psAuthContext = CType(results(1),String)
            psOutXMLEventList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveEventOverviewAsync(ByVal psAuthContext As String, ByVal pasEventTypes() As String, ByVal peStatusFilter As eProgressStatusFilter, ByVal pdModifiedSince As Date, ByVal peUserFilter As eUserFilter, ByVal psXMLRequestedEventData As String, ByVal psOutXMLEventList As String)
            Me.RetrieveEventOverviewAsync(psAuthContext, pasEventTypes, peStatusFilter, pdModifiedSince, peUserFilter, psXMLRequestedEventData, psOutXMLEventList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveEventOverviewAsync(ByVal psAuthContext As String, ByVal pasEventTypes() As String, ByVal peStatusFilter As eProgressStatusFilter, ByVal pdModifiedSince As Date, ByVal peUserFilter As eUserFilter, ByVal psXMLRequestedEventData As String, ByVal psOutXMLEventList As String, ByVal userState As Object)
            If (Me.RetrieveEventOverviewOperationCompleted Is Nothing) Then
                Me.RetrieveEventOverviewOperationCompleted = AddressOf Me.OnRetrieveEventOverviewOperationCompleted
            End If
            Me.InvokeAsync("RetrieveEventOverview", New Object() {psAuthContext, pasEventTypes, peStatusFilter, pdModifiedSince, peUserFilter, psXMLRequestedEventData, psOutXMLEventList}, Me.RetrieveEventOverviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveEventOverviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveEventOverviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveEventOverviewCompleted(Me, New RetrieveEventOverviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/StartEvent", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartEvent(ByRef psAuthContext As String, ByVal psEventType As String, ByVal psDescription As String, ByVal plParentProgressId As Long, ByVal piMaximumProgress As Integer, ByRef psOutEventId As String, ByRef plOutProgressId As Long) As String
            Dim results() As Object = Me.Invoke("StartEvent", New Object() {psAuthContext, psEventType, psDescription, plParentProgressId, piMaximumProgress, psOutEventId, plOutProgressId})
            psAuthContext = CType(results(1),String)
            psOutEventId = CType(results(2),String)
            plOutProgressId = CType(results(3),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartEventAsync(ByVal psAuthContext As String, ByVal psEventType As String, ByVal psDescription As String, ByVal plParentProgressId As Long, ByVal piMaximumProgress As Integer, ByVal psOutEventId As String, ByVal plOutProgressId As Long)
            Me.StartEventAsync(psAuthContext, psEventType, psDescription, plParentProgressId, piMaximumProgress, psOutEventId, plOutProgressId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartEventAsync(ByVal psAuthContext As String, ByVal psEventType As String, ByVal psDescription As String, ByVal plParentProgressId As Long, ByVal piMaximumProgress As Integer, ByVal psOutEventId As String, ByVal plOutProgressId As Long, ByVal userState As Object)
            If (Me.StartEventOperationCompleted Is Nothing) Then
                Me.StartEventOperationCompleted = AddressOf Me.OnStartEventOperationCompleted
            End If
            Me.InvokeAsync("StartEvent", New Object() {psAuthContext, psEventType, psDescription, plParentProgressId, piMaximumProgress, psOutEventId, plOutProgressId}, Me.StartEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartEventCompleted(Me, New StartEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/EndEvent", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EndEvent(ByRef psAuthContext As String, ByVal plProgressId As Long, ByVal peStatus As eProgressStatus, ByVal piCurrentProgress As Integer, ByVal piMaximumProgress As Integer) As String
            Dim results() As Object = Me.Invoke("EndEvent", New Object() {psAuthContext, plProgressId, peStatus, piCurrentProgress, piMaximumProgress})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EndEventAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal peStatus As eProgressStatus, ByVal piCurrentProgress As Integer, ByVal piMaximumProgress As Integer)
            Me.EndEventAsync(psAuthContext, plProgressId, peStatus, piCurrentProgress, piMaximumProgress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EndEventAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal peStatus As eProgressStatus, ByVal piCurrentProgress As Integer, ByVal piMaximumProgress As Integer, ByVal userState As Object)
            If (Me.EndEventOperationCompleted Is Nothing) Then
                Me.EndEventOperationCompleted = AddressOf Me.OnEndEventOperationCompleted
            End If
            Me.InvokeAsync("EndEvent", New Object() {psAuthContext, plProgressId, peStatus, piCurrentProgress, piMaximumProgress}, Me.EndEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnEndEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.EndEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EndEventCompleted(Me, New EndEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/AddEventDetail", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventDetail(ByRef psAuthContext As String, ByVal plProgressId As Long, ByVal peLevel As eEventLevel, ByVal psAction As String, ByVal psDescription As String, ByVal peStatus As eDetailStatus, ByVal peDataType As eEventDataType, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pbData() As Byte, ByRef plOutDetailId As Long) As String
            Dim results() As Object = Me.Invoke("AddEventDetail", New Object() {psAuthContext, plProgressId, peLevel, psAction, psDescription, peStatus, peDataType, pbData, plOutDetailId})
            psAuthContext = CType(results(1),String)
            plOutDetailId = CType(results(2),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventDetailAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal peLevel As eEventLevel, ByVal psAction As String, ByVal psDescription As String, ByVal peStatus As eDetailStatus, ByVal peDataType As eEventDataType, ByVal pbData() As Byte, ByVal plOutDetailId As Long)
            Me.AddEventDetailAsync(psAuthContext, plProgressId, peLevel, psAction, psDescription, peStatus, peDataType, pbData, plOutDetailId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventDetailAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal peLevel As eEventLevel, ByVal psAction As String, ByVal psDescription As String, ByVal peStatus As eDetailStatus, ByVal peDataType As eEventDataType, ByVal pbData() As Byte, ByVal plOutDetailId As Long, ByVal userState As Object)
            If (Me.AddEventDetailOperationCompleted Is Nothing) Then
                Me.AddEventDetailOperationCompleted = AddressOf Me.OnAddEventDetailOperationCompleted
            End If
            Me.InvokeAsync("AddEventDetail", New Object() {psAuthContext, plProgressId, peLevel, psAction, psDescription, peStatus, peDataType, pbData, plOutDetailId}, Me.AddEventDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventDetailCompleted(Me, New AddEventDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/AddEventDetailWithProgress", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventDetailWithProgress(ByRef psAuthContext As String, ByVal plProgressId As Long, ByVal peLevel As eEventLevel, ByVal psAction As String, ByVal psDescription As String, ByVal peStatus As eDetailStatus, ByVal peDataType As eEventDataType, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pbData() As Byte, ByVal piCurrentProgress As Integer, ByVal piMaximumProgress As Integer, ByRef plOutDetailId As Long) As String
            Dim results() As Object = Me.Invoke("AddEventDetailWithProgress", New Object() {psAuthContext, plProgressId, peLevel, psAction, psDescription, peStatus, peDataType, pbData, piCurrentProgress, piMaximumProgress, plOutDetailId})
            psAuthContext = CType(results(1),String)
            plOutDetailId = CType(results(2),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventDetailWithProgressAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal peLevel As eEventLevel, ByVal psAction As String, ByVal psDescription As String, ByVal peStatus As eDetailStatus, ByVal peDataType As eEventDataType, ByVal pbData() As Byte, ByVal piCurrentProgress As Integer, ByVal piMaximumProgress As Integer, ByVal plOutDetailId As Long)
            Me.AddEventDetailWithProgressAsync(psAuthContext, plProgressId, peLevel, psAction, psDescription, peStatus, peDataType, pbData, piCurrentProgress, piMaximumProgress, plOutDetailId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventDetailWithProgressAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal peLevel As eEventLevel, ByVal psAction As String, ByVal psDescription As String, ByVal peStatus As eDetailStatus, ByVal peDataType As eEventDataType, ByVal pbData() As Byte, ByVal piCurrentProgress As Integer, ByVal piMaximumProgress As Integer, ByVal plOutDetailId As Long, ByVal userState As Object)
            If (Me.AddEventDetailWithProgressOperationCompleted Is Nothing) Then
                Me.AddEventDetailWithProgressOperationCompleted = AddressOf Me.OnAddEventDetailWithProgressOperationCompleted
            End If
            Me.InvokeAsync("AddEventDetailWithProgress", New Object() {psAuthContext, plProgressId, peLevel, psAction, psDescription, peStatus, peDataType, pbData, piCurrentProgress, piMaximumProgress, plOutDetailId}, Me.AddEventDetailWithProgressOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventDetailWithProgressOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventDetailWithProgressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventDetailWithProgressCompleted(Me, New AddEventDetailWithProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5/DeleteByProgressId", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteByProgressId(ByRef psAuthContext As String, ByVal plProgressId As Long, ByVal pbDeleteFailedEvents As Boolean, ByVal pbDeleteBusyEvents As Boolean) As String
            Dim results() As Object = Me.Invoke("DeleteByProgressId", New Object() {psAuthContext, plProgressId, pbDeleteFailedEvents, pbDeleteBusyEvents})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteByProgressIdAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal pbDeleteFailedEvents As Boolean, ByVal pbDeleteBusyEvents As Boolean)
            Me.DeleteByProgressIdAsync(psAuthContext, plProgressId, pbDeleteFailedEvents, pbDeleteBusyEvents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteByProgressIdAsync(ByVal psAuthContext As String, ByVal plProgressId As Long, ByVal pbDeleteFailedEvents As Boolean, ByVal pbDeleteBusyEvents As Boolean, ByVal userState As Object)
            If (Me.DeleteByProgressIdOperationCompleted Is Nothing) Then
                Me.DeleteByProgressIdOperationCompleted = AddressOf Me.OnDeleteByProgressIdOperationCompleted
            End If
            Me.InvokeAsync("DeleteByProgressId", New Object() {psAuthContext, plProgressId, pbDeleteFailedEvents, pbDeleteBusyEvents}, Me.DeleteByProgressIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteByProgressIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteByProgressIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteByProgressIdCompleted(Me, New DeleteByProgressIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Public Enum eEventLevel
        
        '''<remarks/>
        Exception
        
        '''<remarks/>
        Warning
        
        '''<remarks/>
        Configuration
        
        '''<remarks/>
        Information
        
        '''<remarks/>
        Verbose
        
        '''<remarks/>
        Debug
    End Enum
    
    '''<remarks/>
    <System.FlagsAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Public Enum eProgressStatusFilter
        
        '''<remarks/>
        Busy = 1
        
        '''<remarks/>
        Success = 2
        
        '''<remarks/>
        Warning = 4
        
        '''<remarks/>
        Failed = 8
        
        '''<remarks/>
        All = 16
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Public Enum eUserFilter
        
        '''<remarks/>
        Current
        
        '''<remarks/>
        All
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Public Enum eProgressStatus
        
        '''<remarks/>
        Busy
        
        '''<remarks/>
        Success
        
        '''<remarks/>
        Warning
        
        '''<remarks/>
        Failed
        
        '''<remarks/>
        Calculate
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Public Enum eDetailStatus
        
        '''<remarks/>
        Success
        
        '''<remarks/>
        Warning
        
        '''<remarks/>
        Failed
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:EventMonitor:2.5")>  _
    Public Enum eEventDataType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        [String]
        
        '''<remarks/>
        List
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        SendEventData
        
        '''<remarks/>
        LogObject
        
        '''<remarks/>
        StatusReport
        
        '''<remarks/>
        CommandOutput
        
        '''<remarks/>
        Other
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetProgressIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProgressIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProgressIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property plOutProgressId() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetEventDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEventDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLEventList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetNextEventDetailDataChunkCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextEventDetailDataChunkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextEventDetailDataChunkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property plOffSet() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property piSize() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pbOutBytes() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveEventsByProgressIdsCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveEventsByProgressIdsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveEventsByProgressIdsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLEventList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveEventsByParentProgressIdsCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveEventsByParentProgressIdsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveEventsByParentProgressIdsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLEventList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveEventOverviewCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveEventOverviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveEventOverviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLEventList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub StartEventCompletedEventHandler(ByVal sender As Object, ByVal e As StartEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutEventId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property plOutProgressId() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub EndEventCompletedEventHandler(ByVal sender As Object, ByVal e As EndEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EndEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub AddEventDetailCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property plOutDetailId() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub AddEventDetailWithProgressCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventDetailWithProgressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventDetailWithProgressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property plOutDetailId() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub DeleteByProgressIdCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteByProgressIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteByProgressIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
