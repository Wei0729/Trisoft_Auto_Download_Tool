'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace OutputFormat25
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="OutputFormat25Soap", [Namespace]:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5")>  _
    Partial Public Class OutputFormat25
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOutputFormatIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOutputFormatNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Esri_Trisoft_Download_Tool.My.MySettings.Default.Esri_Trisoft_Download_Tool_OutputFormat25_OutputFormat25
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetListCompleted As GetListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMetaDataCompleted As GetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOutputFormatIdCompleted As GetOutputFormatIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOutputFormatNameCompleted As GetOutputFormatNameCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5/GetList", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetList(ByRef psAuthContext As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("GetList", New Object() {psAuthContext, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal psAuthContext As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.GetListAsync(psAuthContext, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal psAuthContext As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.GetListOperationCompleted Is Nothing) Then
                Me.GetListOperationCompleted = AddressOf Me.OnGetListOperationCompleted
            End If
            Me.InvokeAsync("GetList", New Object() {psAuthContext, psXMLRequestedMetadata, psOutXMLObjList}, Me.GetListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListCompleted(Me, New GetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5/GetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMetaData(ByRef psAuthContext As String, ByVal psOutputFormatId As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String, ByRef psOutOutputEDT As String) As String
            Dim results() As Object = Me.Invoke("GetMetaData", New Object() {psAuthContext, psOutputFormatId, psXMLRequestedMetadata, psOutXMLObjList, psOutOutputEDT})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            psOutOutputEDT = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psOutputFormatId As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal psOutOutputEDT As String)
            Me.GetMetaDataAsync(psAuthContext, psOutputFormatId, psXMLRequestedMetadata, psOutXMLObjList, psOutOutputEDT, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psOutputFormatId As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal psOutOutputEDT As String, ByVal userState As Object)
            If (Me.GetMetaDataOperationCompleted Is Nothing) Then
                Me.GetMetaDataOperationCompleted = AddressOf Me.OnGetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("GetMetaData", New Object() {psAuthContext, psOutputFormatId, psXMLRequestedMetadata, psOutXMLObjList, psOutOutputEDT}, Me.GetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMetaDataCompleted(Me, New GetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5/GetOutputFormatId", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOutputFormatId(ByRef psAuthContext As String, ByVal psOutputFormatName As String, ByRef psOutOutputFormatId As String) As String
            Dim results() As Object = Me.Invoke("GetOutputFormatId", New Object() {psAuthContext, psOutputFormatName, psOutOutputFormatId})
            psAuthContext = CType(results(1),String)
            psOutOutputFormatId = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOutputFormatIdAsync(ByVal psAuthContext As String, ByVal psOutputFormatName As String, ByVal psOutOutputFormatId As String)
            Me.GetOutputFormatIdAsync(psAuthContext, psOutputFormatName, psOutOutputFormatId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOutputFormatIdAsync(ByVal psAuthContext As String, ByVal psOutputFormatName As String, ByVal psOutOutputFormatId As String, ByVal userState As Object)
            If (Me.GetOutputFormatIdOperationCompleted Is Nothing) Then
                Me.GetOutputFormatIdOperationCompleted = AddressOf Me.OnGetOutputFormatIdOperationCompleted
            End If
            Me.InvokeAsync("GetOutputFormatId", New Object() {psAuthContext, psOutputFormatName, psOutOutputFormatId}, Me.GetOutputFormatIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOutputFormatIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOutputFormatIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOutputFormatIdCompleted(Me, New GetOutputFormatIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5/GetOutputFormatName", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:OutputFormat:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOutputFormatName(ByRef psAuthContext As String, ByVal psOutputFormatId As String, ByRef psOutOutputFormatName As String) As String
            Dim results() As Object = Me.Invoke("GetOutputFormatName", New Object() {psAuthContext, psOutputFormatId, psOutOutputFormatName})
            psAuthContext = CType(results(1),String)
            psOutOutputFormatName = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOutputFormatNameAsync(ByVal psAuthContext As String, ByVal psOutputFormatId As String, ByVal psOutOutputFormatName As String)
            Me.GetOutputFormatNameAsync(psAuthContext, psOutputFormatId, psOutOutputFormatName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOutputFormatNameAsync(ByVal psAuthContext As String, ByVal psOutputFormatId As String, ByVal psOutOutputFormatName As String, ByVal userState As Object)
            If (Me.GetOutputFormatNameOperationCompleted Is Nothing) Then
                Me.GetOutputFormatNameOperationCompleted = AddressOf Me.OnGetOutputFormatNameOperationCompleted
            End If
            Me.InvokeAsync("GetOutputFormatName", New Object() {psAuthContext, psOutputFormatId, psOutOutputFormatName}, Me.GetOutputFormatNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOutputFormatNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOutputFormatNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOutputFormatNameCompleted(Me, New GetOutputFormatNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetListCompletedEventHandler(ByVal sender As Object, ByVal e As GetListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutOutputEDT() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetOutputFormatIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetOutputFormatIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOutputFormatIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutOutputFormatId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetOutputFormatNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetOutputFormatNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOutputFormatNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutOutputFormatName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
