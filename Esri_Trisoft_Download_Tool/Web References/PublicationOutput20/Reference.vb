'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace PublicationOutput20
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="PublicationOutput20Soap", [Namespace]:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0")>  _
    Partial Public Class PublicationOutput20
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelPublishOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelPublishByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMetaDataByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PublishOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PublishByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReleaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReleaseByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveMetaDataByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataObjectInfoByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextDataObjectChunkByIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Esri_Trisoft_Download_Tool.My.MySettings.Default.Esri_Trisoft_Download_Tool_PublicationOutput20_PublicationOutput20
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateCompleted As CreateCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelPublishCompleted As CancelPublishCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelPublishByIshLngRefCompleted As CancelPublishByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCompleted As DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteByIshLngRefCompleted As DeleteByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMetaDataCompleted As SetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMetaDataByIshLngRefCompleted As SetMetaDataByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event PublishCompleted As PublishCompletedEventHandler
        
        '''<remarks/>
        Public Event PublishByIshLngRefCompleted As PublishByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event ReleaseCompleted As ReleaseCompletedEventHandler
        
        '''<remarks/>
        Public Event ReleaseByIshLngRefCompleted As ReleaseByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCompleted As FindCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMetaDataCompleted As GetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveMetaDataByIshLngRefCompleted As RetrieveMetaDataByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveMetaDataCompleted As RetrieveMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportCompleted As GetReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportByIshLngRefCompleted As GetReportByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataObjectInfoByIshLngRefCompleted As GetDataObjectInfoByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextDataObjectChunkByIshLngRefCompleted As GetNextDataObjectChunkByIshLngRefCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/Create", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Create(ByRef psAuthContext As String, ByVal psDocId As String, ByRef psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLMetaData As String) As String
            Dim results() As Object = Me.Invoke("Create", New Object() {psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination, psXMLMetaData})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLMetaData As String)
            Me.CreateAsync(psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination, psXMLMetaData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLMetaData As String, ByVal userState As Object)
            If (Me.CreateOperationCompleted Is Nothing) Then
                Me.CreateOperationCompleted = AddressOf Me.OnCreateOperationCompleted
            End If
            Me.InvokeAsync("Create", New Object() {psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination, psXMLMetaData}, Me.CreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCompleted(Me, New CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/CancelPublish", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelPublish(ByRef psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String) As String
            Dim results() As Object = Me.Invoke("CancelPublish", New Object() {psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelPublishAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String)
            Me.CancelPublishAsync(psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelPublishAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal userState As Object)
            If (Me.CancelPublishOperationCompleted Is Nothing) Then
                Me.CancelPublishOperationCompleted = AddressOf Me.OnCancelPublishOperationCompleted
            End If
            Me.InvokeAsync("CancelPublish", New Object() {psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination}, Me.CancelPublishOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelPublishOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelPublishCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelPublishCompleted(Me, New CancelPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/CancelPublishByIshLngR"& _ 
            "ef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelPublishByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long) As String
            Dim results() As Object = Me.Invoke("CancelPublishByIshLngRef", New Object() {psAuthContext, plLngRef})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelPublishByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long)
            Me.CancelPublishByIshLngRefAsync(psAuthContext, plLngRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelPublishByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal userState As Object)
            If (Me.CancelPublishByIshLngRefOperationCompleted Is Nothing) Then
                Me.CancelPublishByIshLngRefOperationCompleted = AddressOf Me.OnCancelPublishByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("CancelPublishByIshLngRef", New Object() {psAuthContext, plLngRef}, Me.CancelPublishByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelPublishByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelPublishByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelPublishByIshLngRefCompleted(Me, New CancelPublishByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/Delete", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete(ByRef psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String) As String
            Dim results() As Object = Me.Invoke("Delete", New Object() {psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String)
            Me.DeleteAsync(psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal userState As Object)
            If (Me.DeleteOperationCompleted Is Nothing) Then
                Me.DeleteOperationCompleted = AddressOf Me.OnDeleteOperationCompleted
            End If
            Me.InvokeAsync("Delete", New Object() {psAuthContext, psDocId, psVersion, psOutputFormat, psLngCombination}, Me.DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCompleted(Me, New DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/DeleteByIshLngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long) As String
            Dim results() As Object = Me.Invoke("DeleteByIshLngRef", New Object() {psAuthContext, plLngRef})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long)
            Me.DeleteByIshLngRefAsync(psAuthContext, plLngRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal userState As Object)
            If (Me.DeleteByIshLngRefOperationCompleted Is Nothing) Then
                Me.DeleteByIshLngRefOperationCompleted = AddressOf Me.OnDeleteByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("DeleteByIshLngRef", New Object() {psAuthContext, plLngRef}, Me.DeleteByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteByIshLngRefCompleted(Me, New DeleteByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/SetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMetaData(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLRequiredCurrentState As String, ByVal psXMLMetadata As String) As String
            Dim results() As Object = Me.Invoke("SetMetaData", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psXMLRequiredCurrentState, psXMLMetadata})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLRequiredCurrentState As String, ByVal psXMLMetadata As String)
            Me.SetMetaDataAsync(psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psXMLRequiredCurrentState, psXMLMetadata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLRequiredCurrentState As String, ByVal psXMLMetadata As String, ByVal userState As Object)
            If (Me.SetMetaDataOperationCompleted Is Nothing) Then
                Me.SetMetaDataOperationCompleted = AddressOf Me.OnSetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("SetMetaData", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psXMLRequiredCurrentState, psXMLMetadata}, Me.SetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMetaDataCompleted(Me, New SetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/SetMetaDataByIshLngRef"& _ 
            "", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMetaDataByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long, ByVal psXMLRequiredCurrentState As String, ByVal psXMLMetadata As String) As String
            Dim results() As Object = Me.Invoke("SetMetaDataByIshLngRef", New Object() {psAuthContext, plLngRef, psXMLRequiredCurrentState, psXMLMetadata})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psXMLRequiredCurrentState As String, ByVal psXMLMetadata As String)
            Me.SetMetaDataByIshLngRefAsync(psAuthContext, plLngRef, psXMLRequiredCurrentState, psXMLMetadata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psXMLRequiredCurrentState As String, ByVal psXMLMetadata As String, ByVal userState As Object)
            If (Me.SetMetaDataByIshLngRefOperationCompleted Is Nothing) Then
                Me.SetMetaDataByIshLngRefOperationCompleted = AddressOf Me.OnSetMetaDataByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("SetMetaDataByIshLngRef", New Object() {psAuthContext, plLngRef, psXMLRequiredCurrentState, psXMLMetadata}, Me.SetMetaDataByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMetaDataByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMetaDataByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMetaDataByIshLngRefCompleted(Me, New SetMetaDataByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/Publish", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Publish(ByRef psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByRef psOutEventId As String) As String
            Dim results() As Object = Me.Invoke("Publish", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutEventId})
            psAuthContext = CType(results(1),String)
            psOutEventId = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PublishAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psOutEventId As String)
            Me.PublishAsync(psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutEventId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PublishAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psOutEventId As String, ByVal userState As Object)
            If (Me.PublishOperationCompleted Is Nothing) Then
                Me.PublishOperationCompleted = AddressOf Me.OnPublishOperationCompleted
            End If
            Me.InvokeAsync("Publish", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutEventId}, Me.PublishOperationCompleted, userState)
        End Sub
        
        Private Sub OnPublishOperationCompleted(ByVal arg As Object)
            If (Not (Me.PublishCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PublishCompleted(Me, New PublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/PublishByIshLngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PublishByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long, ByRef psOutEventId As String) As String
            Dim results() As Object = Me.Invoke("PublishByIshLngRef", New Object() {psAuthContext, plLngRef, psOutEventId})
            psAuthContext = CType(results(1),String)
            psOutEventId = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PublishByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutEventId As String)
            Me.PublishByIshLngRefAsync(psAuthContext, plLngRef, psOutEventId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PublishByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutEventId As String, ByVal userState As Object)
            If (Me.PublishByIshLngRefOperationCompleted Is Nothing) Then
                Me.PublishByIshLngRefOperationCompleted = AddressOf Me.OnPublishByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("PublishByIshLngRef", New Object() {psAuthContext, plLngRef, psOutEventId}, Me.PublishByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnPublishByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.PublishByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PublishByIshLngRefCompleted(Me, New PublishByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/Release", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Release(ByRef psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("Release", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReleaseAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psOutXMLBaselineReport As String)
            Me.ReleaseAsync(psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReleaseAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.ReleaseOperationCompleted Is Nothing) Then
                Me.ReleaseOperationCompleted = AddressOf Me.OnReleaseOperationCompleted
            End If
            Me.InvokeAsync("Release", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutXMLBaselineReport}, Me.ReleaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnReleaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReleaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReleaseCompleted(Me, New ReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/ReleaseByIshLngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReleaseByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("ReleaseByIshLngRef", New Object() {psAuthContext, plLngRef, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReleaseByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutXMLBaselineReport As String)
            Me.ReleaseByIshLngRefAsync(psAuthContext, plLngRef, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReleaseByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.ReleaseByIshLngRefOperationCompleted Is Nothing) Then
                Me.ReleaseByIshLngRefOperationCompleted = AddressOf Me.OnReleaseByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("ReleaseByIshLngRef", New Object() {psAuthContext, plLngRef, psOutXMLBaselineReport}, Me.ReleaseByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnReleaseByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReleaseByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReleaseByIshLngRefCompleted(Me, New ReleaseByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/Find", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Find(ByRef psAuthContext As String, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("Find", New Object() {psAuthContext, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindAsync(ByVal psAuthContext As String, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.FindAsync(psAuthContext, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindAsync(ByVal psAuthContext As String, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.FindOperationCompleted Is Nothing) Then
                Me.FindOperationCompleted = AddressOf Me.OnFindOperationCompleted
            End If
            Me.InvokeAsync("Find", New Object() {psAuthContext, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList}, Me.FindOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCompleted(Me, New FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/GetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMetaData(ByRef psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("GetMetaData", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.GetMetaDataAsync(psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.GetMetaDataOperationCompleted Is Nothing) Then
                Me.GetMetaDataOperationCompleted = AddressOf Me.OnGetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("GetMetaData", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psXMLRequestedMetadata, psOutXMLObjList}, Me.GetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMetaDataCompleted(Me, New GetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/RetrieveMetaDataByIshL"& _ 
            "ngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveMetaDataByIshLngRef(ByRef psAuthContext As String, ByVal psLngRefs As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveMetaDataByIshLngRef", New Object() {psAuthContext, psLngRefs, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataByIshLngRefAsync(ByVal psAuthContext As String, ByVal psLngRefs As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.RetrieveMetaDataByIshLngRefAsync(psAuthContext, psLngRefs, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataByIshLngRefAsync(ByVal psAuthContext As String, ByVal psLngRefs As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrieveMetaDataByIshLngRefOperationCompleted Is Nothing) Then
                Me.RetrieveMetaDataByIshLngRefOperationCompleted = AddressOf Me.OnRetrieveMetaDataByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("RetrieveMetaDataByIshLngRef", New Object() {psAuthContext, psLngRefs, psXMLRequestedMetadata, psOutXMLObjList}, Me.RetrieveMetaDataByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveMetaDataByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveMetaDataByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveMetaDataByIshLngRefCompleted(Me, New RetrieveMetaDataByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/RetrieveMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveMetaData(ByRef psAuthContext As String, ByVal psDocIDs As String, ByVal psVersion As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveMetaData", New Object() {psAuthContext, psDocIDs, psVersion, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataAsync(ByVal psAuthContext As String, ByVal psDocIDs As String, ByVal psVersion As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.RetrieveMetaDataAsync(psAuthContext, psDocIDs, psVersion, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataAsync(ByVal psAuthContext As String, ByVal psDocIDs As String, ByVal psVersion As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrieveMetaDataOperationCompleted Is Nothing) Then
                Me.RetrieveMetaDataOperationCompleted = AddressOf Me.OnRetrieveMetaDataOperationCompleted
            End If
            Me.InvokeAsync("RetrieveMetaData", New Object() {psAuthContext, psDocIDs, psVersion, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList}, Me.RetrieveMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveMetaDataCompleted(Me, New RetrieveMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/GetReport", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReport(ByRef psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByRef psOutXMLReport As String) As String
            Dim results() As Object = Me.Invoke("GetReport", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutXMLReport})
            psAuthContext = CType(results(1),String)
            psOutXMLReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psOutXMLReport As String)
            Me.GetReportAsync(psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutXMLReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psOutputFormat As String, ByVal psLngCombination As String, ByVal psOutXMLReport As String, ByVal userState As Object)
            If (Me.GetReportOperationCompleted Is Nothing) Then
                Me.GetReportOperationCompleted = AddressOf Me.OnGetReportOperationCompleted
            End If
            Me.InvokeAsync("GetReport", New Object() {psAuthContext, psDocID, psVersion, psOutputFormat, psLngCombination, psOutXMLReport}, Me.GetReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportCompleted(Me, New GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/GetReportByIshLngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long, ByRef psOutXMLReport As String) As String
            Dim results() As Object = Me.Invoke("GetReportByIshLngRef", New Object() {psAuthContext, plLngRef, psOutXMLReport})
            psAuthContext = CType(results(1),String)
            psOutXMLReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutXMLReport As String)
            Me.GetReportByIshLngRefAsync(psAuthContext, plLngRef, psOutXMLReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutXMLReport As String, ByVal userState As Object)
            If (Me.GetReportByIshLngRefOperationCompleted Is Nothing) Then
                Me.GetReportByIshLngRefOperationCompleted = AddressOf Me.OnGetReportByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("GetReportByIshLngRef", New Object() {psAuthContext, plLngRef, psOutXMLReport}, Me.GetReportByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportByIshLngRefCompleted(Me, New GetReportByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/GetDataObjectInfoByIsh"& _ 
            "LngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataObjectInfoByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long, ByRef psOutXMLIshDataObject As String) As String
            Dim results() As Object = Me.Invoke("GetDataObjectInfoByIshLngRef", New Object() {psAuthContext, plLngRef, psOutXMLIshDataObject})
            psAuthContext = CType(results(1),String)
            psOutXMLIshDataObject = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataObjectInfoByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutXMLIshDataObject As String)
            Me.GetDataObjectInfoByIshLngRefAsync(psAuthContext, plLngRef, psOutXMLIshDataObject, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataObjectInfoByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psOutXMLIshDataObject As String, ByVal userState As Object)
            If (Me.GetDataObjectInfoByIshLngRefOperationCompleted Is Nothing) Then
                Me.GetDataObjectInfoByIshLngRefOperationCompleted = AddressOf Me.OnGetDataObjectInfoByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("GetDataObjectInfoByIshLngRef", New Object() {psAuthContext, plLngRef, psOutXMLIshDataObject}, Me.GetDataObjectInfoByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataObjectInfoByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataObjectInfoByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataObjectInfoByIshLngRefCompleted(Me, New GetDataObjectInfoByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0/GetNextDataObjectChunk"& _ 
            "ByIshLngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextDataObjectChunkByIshLngRef(ByRef psAuthContext As String, ByVal plLngRef As Long, ByVal psEdGUID As String, ByRef plOffSet As Long, ByRef piSize As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByRef pbOutBytes() As Byte) As String
            Dim results() As Object = Me.Invoke("GetNextDataObjectChunkByIshLngRef", New Object() {psAuthContext, plLngRef, psEdGUID, plOffSet, piSize, pbOutBytes})
            psAuthContext = CType(results(1),String)
            plOffSet = CType(results(2),Long)
            piSize = CType(results(3),Integer)
            pbOutBytes = CType(results(4),Byte())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextDataObjectChunkByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psEdGUID As String, ByVal plOffSet As Long, ByVal piSize As Integer, ByVal pbOutBytes() As Byte)
            Me.GetNextDataObjectChunkByIshLngRefAsync(psAuthContext, plLngRef, psEdGUID, plOffSet, piSize, pbOutBytes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextDataObjectChunkByIshLngRefAsync(ByVal psAuthContext As String, ByVal plLngRef As Long, ByVal psEdGUID As String, ByVal plOffSet As Long, ByVal piSize As Integer, ByVal pbOutBytes() As Byte, ByVal userState As Object)
            If (Me.GetNextDataObjectChunkByIshLngRefOperationCompleted Is Nothing) Then
                Me.GetNextDataObjectChunkByIshLngRefOperationCompleted = AddressOf Me.OnGetNextDataObjectChunkByIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("GetNextDataObjectChunkByIshLngRef", New Object() {psAuthContext, plLngRef, psEdGUID, plOffSet, piSize, pbOutBytes}, Me.GetNextDataObjectChunkByIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextDataObjectChunkByIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextDataObjectChunkByIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextDataObjectChunkByIshLngRefCompleted(Me, New GetNextDataObjectChunkByIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:PublicationOutput:2.0")>  _
    Public Enum eISHStatusgroup
        
        '''<remarks/>
        ISHReleasedStates
        
        '''<remarks/>
        ISHReleasedOrDraftStates
        
        '''<remarks/>
        ISHOutOfDateOrReleasedStates
        
        '''<remarks/>
        ISHNoStatusFilter
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CreateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CancelPublishCompletedEventHandler(ByVal sender As Object, ByVal e As CancelPublishCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelPublishCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CancelPublishByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As CancelPublishByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelPublishByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub DeleteByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub SetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As SetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub SetMetaDataByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As SetMetaDataByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMetaDataByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub PublishCompletedEventHandler(ByVal sender As Object, ByVal e As PublishCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PublishCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutEventId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub PublishByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As PublishByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PublishByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutEventId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ReleaseCompletedEventHandler(ByVal sender As Object, ByVal e As ReleaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReleaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ReleaseByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As ReleaseByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReleaseByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub FindCompletedEventHandler(ByVal sender As Object, ByVal e As FindCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveMetaDataByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveMetaDataByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveMetaDataByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetReportByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetDataObjectInfoByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataObjectInfoByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataObjectInfoByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLIshDataObject() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetNextDataObjectChunkByIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextDataObjectChunkByIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextDataObjectChunkByIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property plOffSet() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property piSize() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pbOutBytes() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Byte())
            End Get
        End Property
    End Class
End Namespace
